worker_processes auto;
# pid /var/run/nginx.pid;
pid        var/run/nginx.pid;

events {
  # determines how much clients will be served per worker
  # max clients = worker_connections * worker_processes
  # max clients is also limited by the number of socket connections available on the system (~64k)
  worker_connections 1024;
  
  # accept as many connections as possible, may flood worker connections if set too low
  multi_accept on;

  # (hopefully) improve performance a bit more
  accept_mutex off;
}

http {
    # this is helpful due to our use of openresty
    variables_hash_bucket_size 128;
    variables_hash_max_size 1024;

    # don't give version in status string
    server_tokens off;
    
    # copies data between one FD and other from within the kernel
    # faster then read() + write()    
    sendfile on;
    
    # send headers in one piece, its better then sending them one by one 
    tcp_nopush on;
    
    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
    
    # server will close an open connection after this time
    keepalive_timeout 50;
    
    # more timeouts to help against slowlaris DDOS, etc
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;    
    
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings
    access_log var/log/access.log;
    error_log var/log/error.log;

    # Gzip Settings
    gzip on;
    gzip_http_version 1.1;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_min_length 500; 
    gzip_types text/plain text/css text/comma-separated-values
         application/json text/javascript application/javascript application/x-javascript
         text/xml application/xml application/xml+rss application/atom+xml;
    #^ text/html included by default        

    # Rate limiting (basic DDOS protection)
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=25r/s;
    
    # Utilize HSTS (HTTP Strict Transport Security) to force all traffic to be over HTTPS
    # NOTE: DISABLED BY DEFAULT AS IT WONT WORK WITH SELF SIGNED CERTS. ENABLE IN PRODUCTION MODE.
    # add_header Strict-Transport-Security max-age=31536000;
    
    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options DENY;
     
    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;
    
    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";
    
    #used by adobe flash
    add_header X-Permitted-Cross-Domain-Policies "master-only";

    include includes/*.conf;
}
